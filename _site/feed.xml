<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2018-08-10T08:09:53+02:00</updated><id>http://0.0.0.0:4000/</id><title type="html">SleepCoding</title><subtitle>a personal blog.</subtitle><entry><title type="html">laravel impersonating users</title><link href="http://0.0.0.0:4000/2018/05/11/laravel-impersonating-users.html" rel="alternate" type="text/html" title="laravel impersonating users" /><published>2018-05-11T10:03:36+02:00</published><updated>2018-05-11T10:03:36+02:00</updated><id>http://0.0.0.0:4000/2018/05/11/laravel-impersonating-users</id><content type="html" xml:base="http://0.0.0.0:4000/2018/05/11/laravel-impersonating-users.html">&lt;h1&gt;Impersonating Users In Laravel&lt;/h1&gt;
&lt;br&gt;

&lt;!-- ************************************************ --&gt;

&lt;h2&gt;Benifits&lt;/h2&gt;
&lt;p&gt;here's a scenario for you to relize the importance of this feature in your app&lt;/p&gt;
&lt;p&gt;
    some user is experincing a weird problem that you can't replicat with your
    admin/developer account.
    &lt;b&gt;what do you do?&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;you pull out your secret weapon and you login as that user &lt;/p&gt;

&lt;!-- ************************************************ --&gt;

&lt;br&gt;
&lt;br&gt;
&lt;h2&gt;Five Steps To Implement User Impersonation in Laravel :&lt;/h2&gt;
&lt;br&gt;

&lt;!-- ************************************************ --&gt;

&lt;br&gt;
&lt;h3&gt;Step #1&lt;/h3&gt;
&lt;br&gt;

&lt;p&gt;- create a fresh laravel install
    &lt;code&gt;
        &lt;pre&gt;
            &lt;b&gt;
    $ laravel new test-impersonate
            &lt;/b&gt;
        &lt;/pre&gt;
    &lt;/code&gt;
&lt;/p&gt;


&lt;p&gt;- Scaffold Basic Authintication
    &lt;code&gt;
        &lt;pre&gt;
            &lt;b&gt;
    $ php artisan make:auth
            &lt;/b&gt;
        &lt;/pre&gt;
    &lt;/code&gt;
&lt;/p&gt;    

&lt;!-- ************************************************ --&gt;

&lt;br&gt;
&lt;hr&gt;
&lt;h3&gt;Step #2&lt;/h3&gt;
&lt;br&gt;


&lt;p&gt;- setup db
    &lt;code&gt;
        &lt;b&gt;
            &lt;pre&gt;
    mysql&gt; create database impersonat_test;
    mysql&gt; show databases;
            &lt;/pre&gt;
        &lt;/b&gt;
    &lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;- in .env file change: 
    &lt;pre&gt;
    &lt;b&gt;DB_DATABASE&lt;/b&gt; to &lt;b&gt;impersonat_test&lt;/b&gt; (which is the db we created earlier)
    &lt;b&gt;DB_USERNAME&lt;/b&gt; and &lt;b&gt;DB_PASSWORD&lt;/b&gt;
    &lt;/pre&gt;
&lt;/p&gt;


&lt;p&gt;- in database/migration open up the create_users_table.php and after the password feild add this
    &lt;pre&gt;
    &lt;b&gt;$table-&gt;string('type')-&gt;nullable;&lt;/b&gt;
    &lt;/pre&gt;
&lt;/p&gt;


&lt;p&gt;- tell laravel create the tables specified in the migration files
    &lt;pre&gt;
    &lt;b&gt;$ php artisan migrate&lt;/b&gt;
    &lt;/pre&gt;
&lt;/p&gt;


&lt;p&gt;- to confirm they're created
    &lt;b&gt;
        &lt;pre&gt;
    mysql&gt; use impersonat_test;
    mysql&gt; show tables;
    mysql&gt; describe users;
        &lt;/pre&gt;
    &lt;/b&gt;
&lt;/p&gt;

&lt;!-- ************************************************ --&gt;

&lt;br&gt;
&lt;hr&gt;
&lt;h3&gt;Step #3&lt;/h3&gt;
&lt;br&gt;


&lt;p&gt;- seeding: create an admin and a regular user
    &lt;b&gt;
        &lt;pre&gt;
    $ php artisan make:seeder UsersTableSeeder
        &lt;/pre&gt;
    &lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;- open up database/factories and you'll find a user factory ready for you &lt;/p&gt;
&lt;p&gt; then lets make sure to make all users have the same password for testing purpesos
    &lt;b&gt;
        &lt;pre&gt;
    $factory-&gt;defineAs(App\User::class, 'admin', function (Faker $faker) {
        return [
            'name' =&gt; $faker-&gt;name,
            'email' =&gt; $faker-&gt;unique()-&gt;safeEmail,
            'password' =&gt; Hash::make('cm'), // secret
            'type' =&gt; 'admin',
            'remember_token' =&gt; str_random(10),
        ];
    });
    $factory-&gt;defineAs(App\User::class, 'user', function (Faker $faker) {
        return [
            'name' =&gt; $faker-&gt;name,
            'email' =&gt; $faker-&gt;unique()-&gt;safeEmail,
            'password' =&gt; Hash::make('cm'), // secret
            'type' =&gt; 'user',
            'remember_token' =&gt; str_random(10),
        ];
    });
        &lt;/pre&gt;
    &lt;/b&gt;
&lt;/p&gt;


&lt;p&gt;- to use the factories we just created go in the database/seeds/UsersTableSeeder.php inside the run method write the following
    &lt;b&gt;
        &lt;pre&gt;
    factory(\App\User::class, 'admin')-&gt;create();
    factory(\App\User::class, 'user', 3)-&gt;create();
        &lt;/pre&gt;
    &lt;/b&gt;    
&lt;/p&gt;

&lt;p&gt;- in database/seeds/DatabaseSeeder.php make sure to call your seeder table
    &lt;b&gt;
        &lt;pre&gt;
    $this-&gt;call(UsersTableSeeder::class);
        &lt;/pre&gt;
    &lt;/b&gt;
&lt;/p&gt;


&lt;p&gt;- run the following command to actually seed the db and create the admin and the regular user
    &lt;b&gt;
        &lt;pre&gt;
    $ php artisan db:seed
        &lt;/pre&gt;
    &lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;- lets confirm  it created two users with different types
    &lt;b&gt;
        &lt;pre&gt;
    mysql&gt; use impersonat_test;
    mysql&gt; select * from users;
        &lt;/pre&gt;
    &lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;now we can succesfully sign in.&lt;/p&gt;

&lt;!-- ************************************************ --&gt;

&lt;br&gt;
&lt;hr&gt;
&lt;h3&gt;Step #4&lt;/h3&gt;
&lt;br&gt;


&lt;p&gt;- lets create a route that will take a user_id and log us in with that user
    &lt;b&gt;
        &lt;pre&gt;
    Route::get('/admin/impersonate/{user}', 'AdminController@impersonate')-&gt;name('admin.impersonate');
        &lt;/pre&gt;
    &lt;/b&gt;
&lt;/p&gt;


&lt;p&gt;- now we'll make a controller for the admin to handle the impersonation
    &lt;b&gt;
        &lt;pre&gt;
    $ php artisan make:controller AdminController
        &lt;/pre&gt;
    &lt;/b&gt;
&lt;/p&gt;


&lt;p&gt;navigate to &lt;b&gt;App\Http\Controllers\AdminController.php&lt;/b&gt; and add a method called impersonate&lt;/p&gt;
&lt;p&gt;- first we'll pull in the Auth facade, we'll need it to login
    &lt;b&gt;
        &lt;pre&gt;
    use Illuminate\Support\Facades\Auth;
        &lt;/pre&gt;
    &lt;/b&gt;
&lt;/p&gt;


&lt;p&gt;- define the auth middleware in the constructor to protect all routes using this controller
    &lt;b&gt;
        &lt;pre&gt;
    public function __construct(){
        $this-&gt;middleware('auth');
    }
        &lt;/pre&gt;
    &lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;- this is the most important peice that will actually impersonate the user
    &lt;b&gt;
        &lt;pre&gt;
    public function impersonate(\App\User $user){
        Auth::login($user);
        return redirect('/home');
    }
        &lt;/pre&gt;
    &lt;/b&gt;
&lt;/p&gt;

&lt;!-- ************************************************ --&gt;

&lt;br&gt;
&lt;hr&gt;
&lt;h3&gt;Step #5&lt;/h3&gt;
&lt;br&gt;

&lt;p&gt;now we need to make sure that only admins can login as other users , here comes the &quot;gates&quot;&lt;/p&gt;
&lt;p&gt;- we'll modify our impersonate method to be like this
    &lt;b&gt;
        &lt;pre&gt;
    public function impersonate(\App\User $user){
        if (Auth::user()-&gt;type != 'admin') {
            return response('forbidden', 403);
        }
        Auth::login($user);
        return redirect('/home');
    }
        &lt;/pre&gt;
    &lt;/b&gt;
    it checks if the currently authinticated user is of type admin
&lt;/p&gt;</content><author><name></name></author><summary type="html">When using any tool in the &quot;real world&quot;, you feel more confident if you understand how that tool works. Application development is no different. When you understand how your development tools function, you feel more comfortable</summary></entry></feed>